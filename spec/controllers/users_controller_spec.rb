
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  describe "Create" do
    it "should create new users without updated_at value, ensure that they exist even after old users are deleted " do
      user = { :name => "ABC", :email => "abc@tamu.edu", :password=> '123456', :password_confirmation=> '123456' }
      allow(request.env['warden']).to receive(:authenticate!).and_return(user)
      allow(controller).to receive(:current_user).and_return(user)
      post :create, :user => user
    
      # all the created users exist
      expect(User.where(:name => "ABC")).to exist
      
      #delete old users rspec test
      expect(User.delete_old_users).to eql(0)
  
      post :create, :user => { :name => "ADMIN", :email => "admin@tamu.edu", :password=> '123456', :password_confirmation=> '123456' }
    
      # all the created users exist
      expect(User.where(:name => "ADMIN")).to exist
      
      #delete old users rspec test should not delete any users
      expect(User.delete_old_users).to eql(0)
    end

    it "should check that digest action works properly " do
      post :create, :user => { :name => "ABC", :email => "abc@tamu.edu", :password=> '123456', :password_confirmation=> '123456' }
      expect(User.digest("123456")).to_not eql(nil)
    end
  end
  
    describe 'Do not delete users who recently logged in' do
      let!(:user1) { FactoryBot.create(:user, name: 'abc', email: 'abc@tamu.edu', password: '123456', password_digest: '123456',
reset_digest: '265599eadb0d4216a4f5a9d4ac77b091', updated_at: DateTime.new(2016,03,26,12,00,00,"-07:00"), is_admin: false)}
      it 'should check that user exists' do
        allow(controller).to receive(:current_user).and_return(user1)
        expect(User.where(:name => "abc")).to exist
        get :edit, {id: user1.id}
        #update the reset_token --which implies that the user logged in recently
        user1.create_reset_digest
        #delete old users rspec test: Should not delete as there has been an update
        expect(User.delete_old_users).to eql(0)
      end
    end

    describe 'Delete User who has not logged in for more than 2 years' do
      let!(:user1) { FactoryBot.create(:user, name: 'abc', email: 'abc@tamu.edu', password: '123456', password_digest: '123456',
reset_digest: '265599eadb0d4216a4f5a9d4ac77b091', updated_at: DateTime.new(2016,03,26,12,00,00,"-07:00"), is_admin: false)}
      it 'should check that user exists' do
        allow(controller).to receive(:current_user).and_return(user1)
        expect(User.where(:name => "abc")).to exist
        get :edit, {id: user1.id}
        #delete old users rspec test
        expect(User.delete_old_users).to eql(1)
      end
    end


    describe 'Index' do
      before(:each) do
        @admin = FactoryBot.create(:user, is_admin: true, id: 1001)
        allow(controller).to receive(:current_user).and_return(@admin)
        @userList = [ @admin,FactoryBot.create(:user, email:"user1@user.com"), FactoryBot.create(:user, email:"user2@user.com")] 
      end
      it 'Return all user' do
        get :index, format: :json
        expect( assigns(:users).length).to eq(@userList.length) 
      end
    end

    describe 'Show' do
      before(:each) do
        @admin = FactoryBot.create(:user, is_admin: true, id: 1001)
        @userList = [ @admin,FactoryBot.create(:user, email:"user1@user.com"), FactoryBot.create(:user, email:"user2@user.com")] 
      end
      it 'Return current user on sign in' do
        allow(controller).to receive(:current_user).and_return(@admin)
        get :show, format: :json, id: @admin.id
        expect( assigns(:user)).to eq(@admin) 
      end
      it 'Return home on user not signed in' do
        allow(controller).to receive(:user_signed_in?).and_return(false)
        get :show, format: :json, id: @admin.id
        expect( response).to redirect_to("/") 
      end
    end

    describe 'New' do
      it 'Return new form' do
        get :new
        expect( assigns(:user)).not_to be_nil
      end
    end



    describe 'Update' do
      render_views
      before(:each) do
        @admin = FactoryBot.create(:user, is_admin: true, id: 1001)
        allow(controller).to receive(:current_user).and_return(@admin)
        @user = FactoryBot.create(:user, id: 1,email:"user1@user.com")
        @params = { :name => "ABC", :email => "abc@tamu.edu", :password=> '123456', :password_confirmation=> '123456' }
        
      end
      it 'Return eroor on duplicate' do
        @params[:email] = @admin.email
        post :update, id: 1, user: @params, format: :json
        expect( response).not_to render_template("users/show") 
        # expect( response).to have_http_staus("success") 
      end
      it 'Return success on non-duplicate' do
        @params[:email] = @user.email
        post :update, id: 1, user: @params, format: :json
        expect( response).to render_template("users/show") 
      end
    end

    describe 'Destroy' do
      before(:each) do
        @admin = FactoryBot.create(:user, is_admin: true, id: 1001)
        allow(controller).to receive(:current_user).and_return(@admin)
        @user= FactoryBot.create(:user, email:"user1@user.com")
      end
      it 'Delete user' do
        delete :destroy, format: :json, id: @user.id
        expect{ @user.reload}.to raise_error() 
      end
    end    

    describe 'Create' do
      it 'If the  user first and request admin make status approved' do
        params = { is_admin: true, :name => "ABC", :email => "abc@tamu.edu", :password=> '123456', :password_confirmation=> '123456' }
        post :create, user: params
        expect(assigns(:user).reviewStatus).to eq("Approved")
      end
      it 'If the  user is not first and request admin make status Pending' do
        user = FactoryBot.create(:user, is_admin: true, reviewStatus: "Approved")
        params = { is_admin: true, :name => "ABC", :email => "abc@tamu.edu", :password=> '123456', :password_confirmation=> '123456' }
        post :create, user: params
        expect(assigns(:user).reviewStatus).to eq("Pending")
      end
    end    
end
